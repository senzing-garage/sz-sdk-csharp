name: dotnet linux

on:
  push:
    branches-ignore: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "15 7 * * *"

permissions:
  contents: read

jobs:
  dotnet-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - dotnet-version: "8"

    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: install Senzing SDK
        uses: senzing-factory/github-action-install-senzing-sdk@v3
        with:
          packages-to-install: "senzingsdk-runtime senzingsdk-setup"
          senzingsdk-repository-package: ${{ secrets.SENZING_APT_BETA_STAGING_REPOSITORY_PACKAGE }}
          senzingsdk-repository-path: ${{ secrets.SENZING_APT_BETA_STAGING_REPOSITORY_URL }}

      - name: Build with DotNet
        env:
          LD_LIBRARY_PATH: "/opt/senzing/er/lib"
        run: |
          dotnet test Senzing.Sdk.Demo -p:GeneratePackageOnBuild=false
          dotnet build -c Release Senzing.Sdk -p:GenerateDocumentationFile=true

      - name: Validate tests compile
        run: |
          dotnet build Senzing.Sdk.Tests

      - name: Run DotNet tests
        env:
          LD_LIBRARY_PATH: "/opt/senzing/er/lib"
        run: |
          dotnet test Senzing.Sdk.Tests --logger trx --collect:"XPlat Code Coverage"
          cp Senzing.Sdk.Tests/TestResults/*/coverage.cobertura.xml ${{ github.workspace }}

      - name: Store coverage file
        uses: actions/upload-artifact@v4
        with:
          name: coverage.cobertura.xml
          path: coverage.cobertura.xml

  coverage:
    name: Coverage
    needs: dotnet-linux
    permissions:
      pull-requests: write
    uses: senzing-factory/build-resources/.github/workflows/csharp-coverage-comment.yaml@v2
    with:
      thresholds: "85 90"

  slack-notification:
    needs: [dotnet-linux, coverage]
    if: ${{ always() && contains(fromJSON('["failure", "cancelled"]'), needs.dotnet-linux.outputs.status ) && contains(fromJSON('["failure", "cancelled"]'), needs.coverage.outputs.job-status ) && github.event_name == 'schedule' }}
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    uses: senzing-factory/build-resources/.github/workflows/build-failure-slack-notification.yaml@v2
    with:
      job-status: ${{ needs.dotnet-linux.outputs.status && needs.coverage.outputs.job-status }}
